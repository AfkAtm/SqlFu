
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using SqlFu;
using SqlFu.DDL;
using SqlFu.Expressions;
using Xunit;

namespace Tests.Expressions
{
    [Table("Pool", PrimaryKey = "Id", AutoGenerated = true, CreationOptions = IfTableExists.Ignore)]
    [Index("Name", Name = "ix_PoolName", IsUnique = true)]
    public class Pool : Entity<int>
    {
        [Required(ErrorMessage = "Dit is een verplicht veld")]
        [ColumnOptions(IsNullable = false, Size = "50")]
        public string Name { get; set; }

       // [ForeignKey("Player", "Id", OnDelete = ForeignKeyRelationCascade.NoAction)]
        public int PoolOwnerId { get; set; }

        [Ignore]
        [ColumnOptions(Ignore = true)]
        public List<Player> Players { get; set; }

        [QueryOnly]
        //[ColumnOptions(Ignore = true)]
        public int PlayerCount { get; set; }

        [ColumnOptions(IsNullable = true)]
        public string Announcement { get; set; }

        [ColumnOptions(DefaultValue = "0")]
        public PoolType PoolType { get; set; }
    }

    public enum PoolType
    {
        None,Bla
    }

    public class Player
    {
    }

    public abstract class Entity<TKey> 
    {
        public Entity(TKey id)
        {
            this.Id = id;
        }

        public Entity()
        {
        }

        public TKey Id { get; set; }
    }
    public class GenerateSqlFromExpressionsTests:IDisposable
    {
        private SqlFuConnection _db;

        public GenerateSqlFromExpressionsTests()
        {
            _db = Setup.GetDb();
            _db.CreateTable<Pool>();
        }

        [Fact]
        public void select_query_is_properly_generated()
        {
        Assert.DoesNotThrow(()=>GenerateSql());    
            
        }

        private void GenerateSql()
        {
         
                for (var i = 0; i < 1; i++)
                {
                    //var builder = new ExpressionSqlBuilder<Pool>(db.GetProvider().BuilderHelper);
                    //builder
                    //    .WriteSelect()
                    //    .WriteSelectAllColumns()
                    //    .WriteFrom()
                    //    .Where(d=>d.Id==i);
                   // Console.WriteLine(builder.ToString()); 
                    _db.Get<Pool>(d => d.Id == i);
                }
               
         
        }

        public void Dispose()
        {
            _db.Drop<Pool>();
            _db.Dispose();
        }
    }
}